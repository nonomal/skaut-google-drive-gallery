version: 2.1
workflows:
  main:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - package:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - build

job-references:
  php_image: &php_image
    circleci/php:latest-node

  mysql_image: &mysql_image
    circleci/mysql:5

  export_dependency_cache_version: &export_dependency_cache_version
    name: "Export $DEPENDENCY_CACHE_VERSION to a file"
    command: |
      echo "$DEPENDENCY_CACHE_VERSION" > ~/DEPENDENCY_CACHE_VERSION

  restore_composer: &restore_composer
    keys:
      - composer-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-{{ checksum "composer.json" }}
      - composer-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-

  install_composer: &install_composer
    name: "Install Composer dependencies"
    command: composer install -n --prefer-dist

  save_composer: &save_composer
    key: composer-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-{{ checksum "composer.json" }}
    paths:
      - vendor

  restore_npm: &restore_npm
    keys:
      - npm-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-{{ checksum "package.json" }}
      - npm-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-

  install_npm: &install_npm
    name: "Install NPM dependencies"
    command: npm ci

  save_npm: &save_npm
    key: npm-dependencies-{{ checksum "~/DEPENDENCY_CACHE_VERSION" }}-{{ checksum "package.json" }}
    paths:
      - node_modules

jobs:
  build:
    docker:
      - image: *php_image
    steps:
      - checkout

      - run: *export_dependency_cache_version
      - restore_cache: *restore_composer
      - run: *install_composer
      - save_cache: *save_composer
      - restore_cache: *restore_npm
      - run: *install_npm
      - save_cache: *save_npm

      - run:
          name: "Build"
          command: npm run build
      - persist_to_workspace:
          root: dist
          paths:
            - "*"

  package:
    docker:
      - image: circleci/golang:latest
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: "Install ghr"
          command: go get github.com/tcnksm/ghr
      - run:
          name: "Create zip package"
          command: |
            cp -r dist skaut-google-drive-gallery
            zip -r skaut-google-drive-gallery.${CIRCLE_TAG}.zip skaut-google-drive-gallery
      - run:
          name: "Upload the package to GitHub"
          command: ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "Version ${CIRCLE_TAG}" ${CIRCLE_TAG} skaut-google-drive-gallery.${CIRCLE_TAG}.zip
